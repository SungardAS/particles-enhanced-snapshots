{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template was built to run in us-east-1 and will create resources to run enhanced-snapshots (https://github.com/sungardas/enhanced-snapshots) in a pre-configured VPC and Subnet. Templates for other regions can be found at https://github.com/sungardas/particle-enhanced-snapshots\n",
  "Conditions": {
    "VpcIdIsPopulated": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "VpcId"
            },
            ""
          ]
        }
      ]
    },
    "SubnetIdIsPopulated": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SubnetId"
            },
            ""
          ]
        }
      ]
    },
    "DefinedVpcAndSubnet": {
      "Fn::And": [
        {
          "Condition": "VpcIdIsPopulated"
        },
        {
          "Condition": "SubnetIdIsPopulated"
        }
      ]
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
       "ImageID": "ami-9a5ad28d"
     },
     "us-west-1": {
       "ImageID": "ami-a296d7c2"
     },
     "us-west-2": {
       "ImageID": "ami-1406ca74"
     },
     "sa-east-1": {
       "ImageID": "ami-53dc4b3f"
     },
     "eu-central-1": {
       "ImageID": "ami-8ee014e1"
     },
     "eu-west-1": {
       "ImageID": "ami-0f15777c"
     },
     "ap-southeast-1": {
       "ImageID": "ami-e29b4481"
     },
     "ap-southeast-2": {
       "ImageID": "ami-7984ae1a"
     },
     "ap-northeast-1": {
       "ImageID": "ami-3645bd57"
     }
    }
  },
  "Outputs": {
    "InstanceId": {
      "Value": {
        "Ref": "Instance"
      },
      "Description": "Instance ID for the Instance resource"
    },
    "InstanceAvailabilityZone": {
      "Value": {
        "Fn::GetAtt": [
          "Instance",
          "AvailabilityZone"
        ]
      },
      "Description": "AvailabilityZone for the Instance resource"
    },
    "InstancePrivateDns": {
      "Value": {
        "Fn::GetAtt": [
          "Instance",
          "PrivateDnsName"
        ]
      },
      "Description": "Private DNS for the Instance resource"
    },
    "InstancePrivateIp": {
      "Value": {
        "Fn::GetAtt": [
          "Instance",
          "PrivateIp"
        ]
      },
      "Description": "Private IP for the Instance resource"
    },
    "InstancePublicDns": {
      "Value": {
        "Fn::GetAtt": [
          "Instance",
          "PublicDnsName"
        ]
      },
      "Description": "Public DNS for the Instance resource"
    },
    "InstancePublicIp": {
      "Value": {
        "Fn::GetAtt": [
          "Instance",
          "PublicIp"
        ]
      },
      "Description": "Public IP for the Instance resource"
    },
    "SecurityGroupId": {
      "Value": {
        "Fn::GetAtt": [
          "SecurityGroup",
          "GroupId"
        ]
      },
      "Description": "Group ID for the SecurityGroup resource"
    },
    "SecurityGroupName": {
      "Value": {
        "Ref": "SecurityGroup"
      },
      "Description": "Name for the SecurityGroup resource"
    }
  },
  "Parameters": {
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "[required] Name of an existing EC2 key pair to enable SSH access to the instances",
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Type": "String",
      "Default": "m3.large",
      "AllowedValues": [
        "t2.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "c3.xlarge",
        "c3.2xlarge",
        "g2.2xlarge"
      ],
      "Description": "Choose the instance type to use for the Enhanced Snapshot",
      "ConstraintDescription": "Choose EC2 instance types supported by region from m3-large,x,2x m4-large,x,2x, c3-xlarge,2x,g2.2xlarge"
    },
    "NameTag": {
      "Type": "String",
      "Default": "Enhanced Snapshots",
      "Description": "[required] Will set the name tag on created resources"
    },
    "VolumeSize": {
      "Type": "Number",
      "Default": "48",
      "MinValue": "8",
      "Description": "[Required]Size of Instance EBS volume (in GB). Size can be as small as 8 or higher for large amount of data keys storage",
      "ConstraintDescription": "Size can be as small as 8 however can be higher to accomodate large size backups"
    },
    "VolumeIOps": {
      "Type": "Number",
      "Default": "1440",
      "MinValue": "240",
      "Description": "[Required]The number of I/O operations per second (IOPS) that the volume supports. You can use max 30 iops per GB",
      "ConstraintDescription": "IOPs can be 240 due to min volume size however can be higher"
    },
    "SshLocation": {
      "Type": "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "MaxLength": "18",
      "MinLength": "9",
      "Description": "The IP address range that can be used to access the Enhanced Snapshots instance over SSH.  For security considerations 0.0.0.0/0 is not recommended, please restrict to a smaller IP range. x.x.x.x/x format",
      "ConstraintDescription": "must be a valid IP range of the form x.x.x.x/x."
    },
    "SourceCIDR": {
      "Type": "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "MaxLength": "18",
      "MinLength": "9",
      "Description": "The IP address range that can be used to access the Enhanced Snapshots instance over HTTP(80) and HTTPS(443).For security considerations 0.0.0.0/0 is not recommended, please restrict to a smaller IP range.  x.x.x.x/x format ",
      "ConstraintDescription": "must be a valid CIDR range formatted as x.x.x.x/x"
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "[required] VPC to create the instance in. If left blank the default VPC will be used."
    },
    "SubnetId": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "[required] Subnet to create the instance in. If left blank a random subnet in the default VPC will be used."
    }
  },
  "Resources": {
    "InstanceProfileEsAdmin": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EsAdmin"
          }
        ]
      }
    },
    "EsAdmin": {
      "Type": "AWS::IAM::Role",
      "Condition": "",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "ManagedPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Condition": "",
      "Properties": {
        "Description": "Policy es admin role",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Action": [
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:CreateVolume",
                "ec2:DeleteSnapshot",
                "ec2:DeleteTags",
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances",
                "ec2:DescribeRegions",
                "ec2:DescribeSnapshotAttribute",
                "ec2:DescribeSnapshots",
                "ec2:DescribeTags",
                "ec2:DescribeVolumeAttribute",
                "ec2:DescribeVolumeStatus",
                "ec2:DescribeVolumes",
                "ec2:EnableVolumeIO",
                "ec2:ModifyInstanceAttribute",
                "ec2:ModifySnapshotAttribute",
                "ec2:ModifyVolumeAttribute",
                "ec2:ResetSnapshotAttribute",
                "s3:ListAllMyBuckets",
                "dynamodb:ListTables"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:AttachVolume",
                "ec2:DeleteVolume",
                "ec2:DetachVolume",
                "ec2:TerminateInstances"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:ec2",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "instance/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:ec2",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "volume/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:logs",
                      {
                        "Ref": "AWS::Region"
                      },
                      "*:*"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "AllowReservedCapacityDescriptions",
              "Effect": "Allow",
              "Action": [
                "dynamodb:DescribeReservedCapacity",
                "dynamodb:DescribeReservedCapacityOfferings"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:dynamodb",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "dynamodb:*",
              "Resource": [
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:dynamodb",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "table/ENHANCEDSNAPSHOTS*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:dynamodb",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "table/ENHANCEDSNAPSHOTS*/index/*"
                    ]
                  ]
                }
              ],
              "Condition": {}
            },
            {
              "Condition": {},
              "Action": "s3:*",
              "Resource": [
                "arn:aws:s3:::com.sungardas.enhancedsnapshots*",
                "arn:aws:s3:::enhancedsnapshots*"
              ],
              "Effect": "Allow"
            },
            {
              "Action": "s3:CreateBucket",
              "Resource": "arn:aws:s3:::com.sungardas.enhancedsnapshots*",
              "Effect": "Deny"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "EsAdmin"
          }
        ]
      }
    },
    "SecurityGroupIngress22": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Ref": "SshLocation"
        },
        "FromPort": 22,
        "GroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "ToPort": 22
      }
    },
    "SecurityGroupIngress443": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Ref": "SourceCIDR"
        },
        "FromPort": 443,
        "GroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "ToPort": 443
      }
    },
    "SecurityGroupIngress80": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": {
          "Ref": "SourceCIDR"
        },
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "SecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "ToPort": 80
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enhanced Snapshot",
        "VpcId": {
          "Fn::If": [
            "DefinedVpcAndSubnet",
            {
              "Ref": "VpcId"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "NameTag"
            }
          }
        ]
      }
    },
    "Instance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "buckets": [
              "condensation-particles.us-east-1"
            ]
          }
        },
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "setKeys",
              "runApp"
            ]
          },
          "setKeys": {
            "commands": {
              "001": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/usr/bin/aws configure set default.region ",
                      {
                        "Ref": "AWS::Region"
                      }
                    ]
                  ]
                }
              }
            }
          },
          "runApp": {
            "commands": {
              "001": {
                "command": "service tomcat8 restart"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "ImageID"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "SecurityGroup",
              "GroupId"
            ]
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SubnetId": {
          "Fn::If": [
            "DefinedVpcAndSubnet",
            {
              "Ref": "SubnetId"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "IamInstanceProfile": {
          "Ref": "InstanceProfileEsAdmin"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "VolumeIOps"
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" ",
                "  --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "  --resource AppInstanceGroup ",
                "  --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  exit 1\n",
                "}\n",
                "# Process CloudFormation init definitions\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r Instance ",
                " -c default ",
                "    --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "# All is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"Stack setup complete\" ",
                "  --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "  --resource Instance ",
                "  --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "#EOF"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "NameTag"
            }
          }
        ]
      }
    }
  }
}
