{
"Content": {
  "schemaVersion": "1.2",
  "description": "ESS for Linux machines - fsfreeze freeze",
  "parameters": {
   "device":
    {
      "type":"String",
      "description":"Mount point of device to be freezed",
      "allowedPattern": "/dev/[a-z]{3,4}"
    },
   "appURL":
    {
      "type":"String",
      "description":"URL to check the application is working correctly",
      "allowedPattern": "https://.*"
    },
   "timeout":
      {
        "type":"String",
        "default":"300",
        "description":"(Optional) The time in seconds for a command to be completed before it is considered to have failed. Default is 2 mins.",
        "allowedPattern":"[1-9][0-9]{2,3}"
      }
  },
  "runtimeConfig": {
    "aws:runShellScript": {
      "properties": [
        {
          "id": "0.aws:runShellScript",
          "runCommand": [
                "#!/bin/sh",
                "DEVICE=\"\{{ device }}\"",
                "APPURL=\"\{{ appURL }}\"",
                "TIMEOUT=\"\{{ timeout }}\"",
                "[ -z \"$(lsblk -o NAME -rnp | grep \"${DEVICE}\")\" ] && DEVICE=$(find /dev -regex \"^${DEVICE}$\" -type l -exec realpath {} \\;)",
                "[ -z \"${DEVICE}\" ] && echo \" EXIT_RESULT: No_Device_Found\" && exit 0 || echo \"DEVICE: ${DEVICE}\"",
                "SUPPORTED=$(lsblk -o NAME,FSTYPE,MOUNTPOINT -rnp | grep -E \"${DEVICE}[0-9]* (ext3|ext4|reiserfs|xfs) /.+\" | wc -l)",
                "ALL=$(lsblk -o NAME,FSTYPE,MOUNTPOINT -rnp | grep -E \"${DEVICE}[0-9]* .+ /.+\" | wc -l)",
                "[ \"${SUPPORTED}\" -ne \"${ALL}\" ] && echo \"EXIT_RESULT: Unsupported_FS\" && exit 0",
                "[ -z \"$(which fsfreeze)\" ] && echo \"EXIT_RESULT: No_FsFreeze_Tool\" && exit 0",
                "lsblk -o NAME,FSTYPE,MOUNTPOINT -rnp | grep -E \"${DEVICE}[0-9]* (ext3|ext4|reiserfs|xfs) /.+\"|",
                "while read DEV NAME MOUNTPOINT; do",
                "echo \"freezing ${DEV}: ${MOUNTPOINT}\" ; $(which fsfreeze) -f ${MOUNTPOINT}",
                "if [ $? != 0 ]; then echo \"EXIT_RESULT: Fsfreeze_failed_${MOUNTPOINT}\"; else",
                "MPS=\"$MPS $MOUNTPOINT\" ; echo ${MPS} > /tmp/var",
                "fi",
                "done",
                "(",
                "sleep $TIMEOUT",
                "check=$(curl -k -s -o /dev/null -w \"%{http_code}\" ${APPURL})",
                "sleep 5",
                "check=$(curl -k -s -o /dev/null -w \"%{http_code}\" ${APPURL})",
                "if [ \"${check}\" != \"200\" ] && [ \"${check2}\" != \"200\" ]; then",
                "sleep 5",
                "check3=$(curl -k -s -o /dev/null -w \"%{http_code}\" ${APPURL})",
                "if [ \"${check3}\" -ne \"200\" ]; then",
                "for MP in $(cat /tmp/var); do $(which fsfreeze) -u ${MP}; done",
                "exit 0",
                "fi",
                "fi",
                "exit 0",
                ") &",
                "echo \"EXIT_RESULT: Frozen\"",
                "exit 0"
          ]
        }
      ]
    }
  }
}
}