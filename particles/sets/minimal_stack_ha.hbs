---
ingressPorts:
  - 443
  - 80
ingressPortsSSH:
  - 22
privateIngressPorts:
  - 6442
  - 61614
  - 61616
publicSubnet:
  - 1
  - 2
healthCheck:
  Target: HTTPS:443/
  HealthyThreshold: 3
  UnhealthyThreshold: 5
  Interval: 30
  Timeout: 10
---

  {{parameter "key_name" logicalId="KeyName"}}
  {{parameter "image_id" "base" logicalId="ImageId"}}
  {{parameter "instance_type" logicalId="InstanceType"}}
  {{parameter "name_tag" logicalId="NameTag"}}
  {{parameter "volume" logicalId="VolumeSize"}}
  {{parameter "iops" logicalId="VolumeIOps"}}
  {{parameter "ssh_location" logicalId="SshLocation"}}
  {{parameter "role_select" logicalId="RoleSelect"}}
  {{parameter "bucket_name" logicalId="BucketName"}}
  {{parameter "cluster_name" logicalId="ClusterName"}}
  {{parameter "vpc_id" logicalId="VpcId" description="[required] VPC to create the instance in."}}
  {{parameter "uuid" logicalId="UUID"}}

  {{parameter "m:core" "cidr_range"
    logicalId="VPCCIDR"
    allowedPattern="(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    maxLength="18"
    minLength="9"
    description="[Required]CIDR address of VPC will be created for infrastructure"
    constraintDescription="must be a valid CIDR range formatted as x.x.x.x/x"
  }}


  {{#each publicSubnet}}
    {{
      parameter "subnet_id"
      logicalId=(concat "PublicSubnet" this)
      description="[Required] Network for Elastic Load Balancer"
    }}
  {{/each}}

  {{parameter "m:core" "arn"
    description="[Required] Existing SSL Certificate ARN"
    logicalId="SslCertificateArn"}}


  {{
    condition "defined_role"
    logicalId="DefinedRole"
    roleSelectLogicalId="RoleSelect"
  }}

  {{parameter "m:core" "cidr_range"
    logicalId="SourceCIDR"
    allowedPattern="(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    maxLength="18"
    minLength="9"
    description="The IP address range that can be used to access the Enhanced Snapshots instances over HTTP(80) and HTTPS(443).For security considerations 0.0.0.0/0 is not recommended, please restrict to a smaller IP range.  x.x.x.x/x format "
    constraintDescription="must be a valid CIDR range formatted as x.x.x.x/x"
  }}

  {{
    resource 'instanceprofile' logicalId="InstanceProfileEsAdmin"
    roleSelectLogicalId="RoleSelect"
    definedRoleLogicalId="DefinedRole"
  }}

  {{
    resource 'role' logicalId="EsAdmin"
    definedRoleLogicalId="DefinedRole"
  }}

  {{
    resource 'managedpolicy_ha' logicalId="ManagedPolicy"
    definedRoleLogicalId="DefinedRole"
  }}

  {{set "m:core" "true_false" parameterLogicalId="CreateSecurityRules" default="true"}}

  {{#each ingressPortsSSH}}
    {{
      resource "m:core" "base"
      type="AWS::EC2::SecurityGroupIngress"
      condition="CreateSecurityRulesIsTrueCondition"
      logicalId=(concat "SecurityGroupIngress" this)
      properties=(
        partial "security_group_ingress_properties"
        cidrLogicalId="VPCCIDR"
        securityGroupId='{"Fn::GetAtt": ["SecurityGroup","GroupId"]}'
        fromPort=this
        toPort=this
      )
    }}
  {{/each}}

  {{#each ingressPorts}}
    {{
      resource "m:core" "base"
      type="AWS::EC2::SecurityGroupIngress"
      condition="CreateSecurityRulesIsTrueCondition"
      logicalId=(concat "SecurityGroupIngress" this)
      properties=(
        partial "security_group_ingress_properties"
        cidrLogicalId="VPCCIDR"
        securityGroupId='{"Fn::GetAtt": ["SecurityGroup","GroupId"]}'
        fromPort=this
        toPort=this
      )
    }}
  {{/each}}

  {{#each privateIngressPorts}}
    {{
      resource "m:core" "base"
      type="AWS::EC2::SecurityGroupIngress"
      logicalId=(concat "SecurityGroupIngress" this)
      properties=(
        partial "security_group_ingress_properties"
        cidrLogicalId="VPCCIDR"
        securityGroupId='{"Fn::GetAtt": ["SecurityGroup","GroupId"]}'
        fromPort=this
        toPort=this
      )
    }}
  {{/each}}

  {{resource 'sns_topic'
    logicalId="SnsTopic"
    clusterNameLogicalId=(ref "ClusterName")
  }}

  {{
    resource "m:ec2" "load_balancer"
    logicalId="ElasticLoadBalancer"
    scheme='internet-facing'
    subnets='[ {"Ref": "PublicSubnet1"}, {"Ref": "PublicSubnet2"} ]'
    crossZone='true'
    loadBalancerName='{"Fn::Join": ["",[{"Ref": "ClusterName"},"-lb"]]}'
    lbCookieStickinessPolicy='[ {"PolicyName": "ESSELBPolicy"} ]'
    listeners=(
      partial 'listener'
      policyNames="ESSELBPolicy"
      sslCertificateArnLogicalId=(ref "SslCertificateArn")
    )
  }}


  {{set 'm:vpc' 'security_group/output_all' securityGroupLogicalId="SecurityGroup"}}
  {{set 'm:ec2' 'load_balancer/output_all'  loadBalancerLogicalId="ElasticLoadBalancer"}}
